{-# OPTIONS_GHC -fno-warn-incomplete-patterns #-}
module Latte.Parser.Print where

-- pretty-printer generated by the BNF converter

import Latte.Parser.Abs
import Data.Char


-- the top-level printing method
printTree :: Print a => a -> String
printTree = render . prt 0

type Doc = [ShowS] -> [ShowS]

doc :: ShowS -> Doc
doc = (:)

render :: Doc -> String
render d = rend 0 (map ($ "") $ d []) "" where
  rend i ss = case ss of
    "["      :ts -> showChar '[' . rend i ts
    "("      :ts -> showChar '(' . rend i ts
    "{"      :ts -> showChar '{' . new (i+1) . rend (i+1) ts
    "}" : ";":ts -> new (i-1) . space "}" . showChar ';' . new (i-1) . rend (i-1) ts
    "}"      :ts -> new (i-1) . showChar '}' . new (i-1) . rend (i-1) ts
    ";"      :ts -> showChar ';' . new i . rend i ts
    t  : "," :ts -> showString t . space "," . rend i ts
    t  : ")" :ts -> showString t . showChar ')' . rend i ts
    t  : "]" :ts -> showString t . showChar ']' . rend i ts
    t        :ts -> space t . rend i ts
    _            -> id
  new i   = showChar '\n' . replicateS (2*i) (showChar ' ') . dropWhile isSpace
  space t = showString t . (\s -> if null s then "" else ' ':s)

parenth :: Doc -> Doc
parenth ss = doc (showChar '(') . ss . doc (showChar ')')

concatS :: [ShowS] -> ShowS
concatS = foldr (.) id

concatD :: [Doc] -> Doc
concatD = foldr (.) id

replicateS :: Int -> ShowS -> ShowS
replicateS n f = concatS (replicate n f)

-- the printer class does the job
class Print a where
  prt :: Int -> a -> Doc
  prtList :: Int -> [a] -> Doc
  prtList i = concatD . map (prt i)

instance Print a => Print [a] where
  prt = prtList

instance Print Char where
  prt _ s = doc (showChar '\'' . mkEsc '\'' s . showChar '\'')
  prtList _ s = doc (showChar '"' . concatS (map (mkEsc '"') s) . showChar '"')

mkEsc :: Char -> Char -> ShowS
mkEsc q s = case s of
  _ | s == q -> showChar '\\' . showChar s
  '\\'-> showString "\\\\"
  '\n' -> showString "\\n"
  '\t' -> showString "\\t"
  _ -> showChar s

prPrec :: Int -> Int -> Doc -> Doc
prPrec i j = if j<i then parenth else id


instance Print Integer where
  prt _ x = doc (shows x)


instance Print Double where
  prt _ x = doc (shows x)


instance Print Ident where
  prt _ (Ident i) = doc (showString ( i))
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString "."), prt 0 xs])


instance Print (Program a) where
  prt i e = case e of
    Program _ topdefs -> prPrec i 0 (concatD [prt 0 topdefs])

instance Print (TopDef a) where
  prt i e = case e of
    FnDef _ fn -> prPrec i 0 (concatD [prt 0 fn])
    ClsDef _ clsheader clselems -> prPrec i 0 (concatD [prt 0 clsheader, doc (showString "{"), prt 0 clselems, doc (showString "}")])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Fn a) where
  prt i e = case e of
    Fn _ type_ id args block -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString "("), prt 0 args, doc (showString ")"), prt 0 block])

instance Print (ClsHeader a) where
  prt i e = case e of
    BaseCls _ id -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id])
    SubCls _ id1 id2 -> prPrec i 0 (concatD [doc (showString "class"), prt 0 id1, doc (showString "extends"), prt 0 id2])

instance Print (ClsElem a) where
  prt i e = case e of
    Method _ fn -> prPrec i 0 (concatD [prt 0 fn])
    Field _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Arg a) where
  prt i e = case e of
    NoValArg _ type_ id -> prPrec i 0 (concatD [prt 0 type_, prt 0 id])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Block a) where
  prt i e = case e of
    Block _ stmts -> prPrec i 0 (concatD [doc (showString "{"), prt 0 stmts, doc (showString "}")])

instance Print (Stmt a) where
  prt i e = case e of
    Empty _ -> prPrec i 0 (concatD [doc (showString ";")])
    BStmt _ block -> prPrec i 0 (concatD [prt 0 block])
    Decl _ type_ items -> prPrec i 0 (concatD [prt 0 type_, prt 0 items, doc (showString ";")])
    Ass _ expr1 expr2 -> prPrec i 0 (concatD [prt 0 expr1, doc (showString "="), prt 0 expr2, doc (showString ";")])
    Incr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "++"), doc (showString ";")])
    Decr _ id -> prPrec i 0 (concatD [prt 0 id, doc (showString "--"), doc (showString ";")])
    Ret _ expr -> prPrec i 0 (concatD [doc (showString "return"), prt 0 expr, doc (showString ";")])
    VRet _ -> prPrec i 0 (concatD [doc (showString "return"), doc (showString ";")])
    Cond _ expr stmt -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    CondElse _ expr stmt1 stmt2 -> prPrec i 0 (concatD [doc (showString "if"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt1, doc (showString "else"), prt 0 stmt2])
    While _ expr stmt -> prPrec i 0 (concatD [doc (showString "while"), doc (showString "("), prt 0 expr, doc (showString ")"), prt 0 stmt])
    ForEach _ type_ id1 id2 stmt -> prPrec i 0 (concatD [doc (showString "for"), doc (showString "("), prt 0 type_, prt 0 id1, doc (showString ":"), prt 0 id2, doc (showString ")"), prt 0 stmt])
    SExp _ expr -> prPrec i 0 (concatD [prt 0 expr, doc (showString ";")])
  prtList _ [] = (concatD [])
  prtList _ (x:xs) = (concatD [prt 0 x, prt 0 xs])
instance Print (Item a) where
  prt i e = case e of
    NoInit _ id -> prPrec i 0 (concatD [prt 0 id])
    Init _ id expr -> prPrec i 0 (concatD [prt 0 id, doc (showString "="), prt 0 expr])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (BasicType a) where
  prt i e = case e of
    TInt _ -> prPrec i 0 (concatD [doc (showString "int")])
    TStr _ -> prPrec i 0 (concatD [doc (showString "string")])
    TBool _ -> prPrec i 0 (concatD [doc (showString "boolean")])

instance Print (Type a) where
  prt i e = case e of
    TVoid _ -> prPrec i 0 (concatD [doc (showString "void")])
    TArr _ type_ -> prPrec i 0 (concatD [prt 0 type_, doc (showString "["), doc (showString "]")])
    TBasic _ basictype -> prPrec i 0 (concatD [prt 0 basictype])
    TObj _ id -> prPrec i 0 (concatD [prt 0 id])
    Fun _ type_ types -> prPrec i 0 (concatD [prt 0 type_, doc (showString "("), prt 0 types, doc (showString ")")])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (Expr a) where
  prt i e = case e of
    EVar _ ids -> prPrec i 6 (concatD [prt 0 ids])
    EConstant _ constant -> prPrec i 6 (concatD [prt 0 constant])
    EFieldAcc _ fieldacc -> prPrec i 6 (concatD [prt 0 fieldacc])
    EMth _ mthcall -> prPrec i 6 (concatD [prt 0 mthcall])
    ESpecName _ specname -> prPrec i 6 (concatD [prt 0 specname])
    ENewAlloc _ newalloc -> prPrec i 6 (concatD [prt 0 newalloc])
    EArr _ arracc -> prPrec i 6 (concatD [prt 0 arracc])
    EString _ str -> prPrec i 6 (concatD [prt 0 str])
    ENeg _ expr -> prPrec i 5 (concatD [doc (showString "-"), prt 6 expr])
    ENot _ expr -> prPrec i 5 (concatD [doc (showString "!"), prt 6 expr])
    ECast _ id expr -> prPrec i 5 (concatD [doc (showString "("), prt 0 id, doc (showString ")"), prt 6 expr])
    EMul _ expr1 mulop expr2 -> prPrec i 4 (concatD [prt 4 expr1, prt 0 mulop, prt 5 expr2])
    EAdd _ expr1 addop expr2 -> prPrec i 3 (concatD [prt 3 expr1, prt 0 addop, prt 4 expr2])
    ERel _ expr1 relop expr2 -> prPrec i 2 (concatD [prt 2 expr1, prt 0 relop, prt 3 expr2])
    EAnd _ expr1 expr2 -> prPrec i 1 (concatD [prt 2 expr1, doc (showString "&&"), prt 1 expr2])
    EOr _ expr1 expr2 -> prPrec i 0 (concatD [prt 1 expr1, doc (showString "||"), prt 0 expr2])
  prtList _ [] = (concatD [])
  prtList _ [x] = (concatD [prt 0 x])
  prtList _ (x:xs) = (concatD [prt 0 x, doc (showString ","), prt 0 xs])
instance Print (SpecName a) where
  prt i e = case e of
    SSsuper _ -> prPrec i 0 (concatD [doc (showString "super")])
    SSthis _ -> prPrec i 0 (concatD [doc (showString "this")])
    SSnull _ -> prPrec i 0 (concatD [doc (showString "null")])

instance Print (NewAlloc a) where
  prt i e = case e of
    NewArr _ basictype expr -> prPrec i 0 (concatD [doc (showString "new"), prt 0 basictype, doc (showString "["), prt 0 expr, doc (showString "]")])
    NewObj _ id -> prPrec i 0 (concatD [doc (showString "new"), prt 0 id])
    NewObjConst _ id args -> prPrec i 0 (concatD [doc (showString "new"), prt 0 id, prt 0 args])

instance Print (ArrAcc a) where
  prt i e = case e of
    Aarr _ ids expr -> prPrec i 0 (concatD [prt 0 ids, doc (showString "["), prt 0 expr, doc (showString "]")])
    Aarr1 _ specexp expr -> prPrec i 0 (concatD [prt 0 specexp, doc (showString "["), prt 0 expr, doc (showString "]")])

instance Print (SpecExp a) where
  prt i e = case e of
    Cep _ expr -> prPrec i 0 (concatD [doc (showString "("), prt 0 expr, doc (showString ")")])
    Cnp _ specexpnp -> prPrec i 0 (concatD [prt 0 specexpnp])
    Cthis _ specname -> prPrec i 0 (concatD [prt 0 specname])

instance Print (SpecExpNP a) where
  prt i e = case e of
    CNLit _ constant -> prPrec i 0 (concatD [prt 0 constant])
    CNParr _ arracc -> prPrec i 0 (concatD [prt 0 arracc])
    CNPmth _ mthcall -> prPrec i 0 (concatD [prt 0 mthcall])
    CNPfld _ fieldacc -> prPrec i 0 (concatD [prt 0 fieldacc])

instance Print (MthCall a) where
  prt i e = case e of
    Mmth _ ids args -> prPrec i 0 (concatD [prt 0 ids, prt 0 args])
    Mmth1 _ specexpnp args -> prPrec i 0 (concatD [prt 0 specexpnp, prt 0 args])
    Mmthspec _ specname args -> prPrec i 0 (concatD [prt 0 specname, prt 0 args])

instance Print (FieldAcc a) where
  prt i e = case e of
    Ffvar _ specexp id -> prPrec i 0 (concatD [prt 0 specexp, doc (showString "."), prt 0 id])
    Ffvar1 _ newalloc id -> prPrec i 0 (concatD [prt 0 newalloc, doc (showString "."), prt 0 id])

instance Print (Args a) where
  prt i e = case e of
    Args _ exprs -> prPrec i 0 (concatD [doc (showString "("), prt 0 exprs, doc (showString ")")])

instance Print (Constant a) where
  prt i e = case e of
    Cint _ n -> prPrec i 0 (concatD [prt 0 n])
    Cfalse _ -> prPrec i 0 (concatD [doc (showString "false")])
    Ctrue _ -> prPrec i 0 (concatD [doc (showString "true")])

instance Print (AddOp a) where
  prt i e = case e of
    Plus _ -> prPrec i 0 (concatD [doc (showString "+")])
    Minus _ -> prPrec i 0 (concatD [doc (showString "-")])

instance Print (MulOp a) where
  prt i e = case e of
    Times _ -> prPrec i 0 (concatD [doc (showString "*")])
    Div _ -> prPrec i 0 (concatD [doc (showString "/")])
    Mod _ -> prPrec i 0 (concatD [doc (showString "%")])

instance Print (RelOp a) where
  prt i e = case e of
    LTH _ -> prPrec i 0 (concatD [doc (showString "<")])
    LE _ -> prPrec i 0 (concatD [doc (showString "<=")])
    GTH _ -> prPrec i 0 (concatD [doc (showString ">")])
    GE _ -> prPrec i 0 (concatD [doc (showString ">=")])
    EQU _ -> prPrec i 0 (concatD [doc (showString "==")])
    NE _ -> prPrec i 0 (concatD [doc (showString "!=")])


