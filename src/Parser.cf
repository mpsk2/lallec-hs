-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= Fn ;
ClsDef.    TopDef ::= ClsHeader "{" [ClsElem] "}" ;
separator nonempty TopDef "" ;

Fn.        Fn ::= Type Ident "(" [Arg] ")" Block ;

BaseCls.   ClsHeader ::= "class" Ident ;
SubCls.    ClsHeader ::= "class" Ident "extends" Ident ;

Method.    ClsElem ::= Fn ;
Field.     ClsElem ::= Type Ident ";" ;
separator  ClsElem "" ;

NoValArg.  Arg ::= Type Ident;
separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;
Ass.       Stmt ::= Expr "=" Expr  ";" ;
Incr.      Stmt ::= Ident "++"  ";" ;
Decr.      Stmt ::= Ident "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
While.     Stmt ::= "while" "(" Expr ")" Stmt ;
ForEach.   Stmt ::= "for" "(" Type Ident ":" Ident ")" Stmt ;
SExp.      Stmt ::= Expr  ";" ;

NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;

separator nonempty Item "," ;

-- Types ---------------------------------------------------

TInt.      BasicType ::= "int" ;
TStr.      BasicType ::= "string" ;
TBool.     BasicType ::= "boolean" ;
TVoid.     Type ::= "void" ;
TArr.      Type ::= Type "[" "]" ;
TBasic.    Type ::= BasicType ;
TObj.      Type ::= Ident ;
internal   Fun. Type ::= Type "(" [Type] ")" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= [Ident] ;
EConstant. Expr6 ::= Constant ;
EFieldAcc. Expr6 ::= FieldAcc ;
EMth.      Expr6 ::= MthCall ;
ESpecName. Expr6 ::= SpecName ;
ENewAlloc. Expr6 ::= NewAlloc ;
EArr.      Expr6 ::= ArrAcc ;
EString.   Expr6 ::= String ;
ENeg.      Expr5 ::= "-" Expr6 ;
ENot.      Expr5 ::= "!" Expr6 ;
ECast.     Expr5 ::= "(" Ident ")" Expr6;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr ::= Expr1 "||" Expr ;
coercions  Expr 6 ;

separator  Expr "," ;

SSsuper.   SpecName ::= "super" ;
SSthis.    SpecName ::= "this" ;
SSnull.    SpecName ::= "null";

NewArr.         NewAlloc ::= "new" BasicType "[" Expr "]" ;
NewObj.         NewAlloc ::= "new" Ident ;
NewObjConst.    NewAlloc ::= "new" Ident Args ;

Aarr.      ArrAcc ::= [Ident] "[" Expr "]" ;
Aarr1.     ArrAcc ::= SpecExp "[" Expr "]" ;

Cep.       SpecExp ::= "(" Expr ")" ;
Cnp.       SpecExp ::= SpecExpNP ;
Cthis.     SpecExp ::= SpecName ;

CNLit.     SpecExpNP ::= Constant ;
CNParr.    SpecExpNP ::= ArrAcc ;
CNPmth.    SpecExpNP ::= MthCall ;
CNPfld.    SpecExpNP ::= FieldAcc ;

Mmth.      MthCall ::= [Ident] Args ;
Mmth1.     MthCall ::= SpecExpNP Args ;
Mmthspec.  MthCall ::= SpecName Args ;

Ffvar.     FieldAcc ::= SpecExp "." Ident ;
Ffvar1.    FieldAcc ::= NewAlloc "." Ident ;

Args.      Args ::= "(" [Expr] ")" ;

-- constants -----------------------------------------------

Cint.      Constant ::= Integer ;
Cfalse.    Constant ::= "false" ;
Ctrue.     Constant ::= "true" ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;


-- Ident ---------------------------------------------------

separator nonempty Ident "." ;
